[ 소프트웨어/프로그램 개발시 사용되는 반복작업/패턴 ]
- MVC 디자인 패턴
    ex]
        [생활]
        - 1인 식당( 사장님이 서빙하고 , 요리하고 , 재료관리 ) : 1인 식당이 가능한 이유는 규모가 작은 식당이니까.
        - 직원이 증가하면 ( 서빙직원 , 요리직원 , 재료직원 ) : 각 파트별 담당을 분류한다. 왜? 각 담당별 책임(문제파악)
        [코드]
        - 하나의 클래스( 입출력 , 가공/유효성검사 , 데이터관리 ) : 하나의 클래스에서 모든 코드를 작성
        - 프로젝트 규모가 커지면( 입출력담당클래스 , 가공/유효성검사담당클래스 , 데이터관리담당클래스 )
            : 각 파트별 클래스를 분류한다. 왜?? 문제가 생기면 식별/유지보수(문제파악)

    1. 목적 : 프로젝트를 구성할때 복잡한 코드와 파일들을 MVC패턴의 따라 구성하는 방법
        - 왜??? 협업에서는 다양한 사람들이 동일한 프로젝트를 하면서 서로 다른 코드를 작성 하는데 구분 방법
        - 하나로 파일에서 작성된 코드를 목적/사용 에 따라 MVC구성요소 로 분리
    2. 장점 : 유지보수, 협업, 단일기능(모듈단위:추후에 다른 기능과 커스텀 쉽다. )
        예] 완제품 : 피규어 ,  모듈제품 : 레고 조각
    3. 단점 : 클래스/.java파일/패키지 등등 파일구분이 많아서 파일 관리가 어렵다.
    4. 구성 종류 , 각 구성별로 역할의 책임이 존재한다.
        - M(Model) : 모델         : 데이터 관리 담당
            - DTO( Data Transfer Object = 데이터 이동 객체 )
            - VO( value Object = 값 객체 , setter함수가 존재하지 않는 읽기모드 객체  )
            - DAO( Data Access Object = 데이터 접근 객체 , 주로 데이터베이스접근 객체 )

        - V(View) : 뷰(화면)       : 입출력 담당 ( 추후에 HTML/CSS/JS 프론트엔드 )
            - (콘솔기준) : scanner , print , (제어문)만 사용하는 구역

        - C(Controller) : 제어    : Model 과 View 사이 에서의 제어과 전달 담당
            - view 로부터 전달 받은 데이터를 Model(Dao) 에게 전달 하는 역할
            - 데이터 유효성검사

    5. MVC 패턴 과 싱글톤 패턴과 관계
        - view 클래스와 controller 클래스와 dao 클래스는 싱글톤 을 사용한다. 왜? 3개의 클래스는 정보가 아닌 기능 이므로 1개만 있어도 된다.
        - dto는 각 데이터들의 고유한 정보 이므로 싱글톤을 사용하지 않는다. 왜? 여러개 정보들은 각각 다른 정보 이므로 1개가 아니다.

- 싱글(혼자)톤(객체) 패턴
    - 프로젝트내 하나의 객체만 가질수 있도록 만드는 패턴
    1. 목적 : 무의미한 객체가 많아지면 객체 관리가 힘들고 , 굳이 객체가 많이 필요 없을때 사용 , 즉] 객체가 1개만 필요할때 사용
    2. 장점 : 객체 1개 존재하므로 관리 편하다 , ** 프로그램내에서 객체 정보 공유 **
    3. 단점 : 메모리 효율성이 좋지 않을수 있다.
    4. 구성 방법
        1. 싱글톤을 만들 클래스에서 현재 클래스의 private static 객체를 생성한다.
        2. 생성자를 외부로부터 차단한다. 생성자를 private 만든다.
        3. private static 싱글톤 객체를 외부로 부터 접근할수 있도록 싱글톤 getter함수를 만든다.

            public class 클래스명{
                private static 클래스명 싱글톤변수명 = new 클래스명();
                private 클래스명(){}
                public static 클래스명 getter싱글톤변수명(){
                    return this.싱글톤변수명;
                }
            }